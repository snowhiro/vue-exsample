bplist00—_WebMainResource’	
^WebResourceURL_WebResourceFrameName_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName_@http://unpkg.com/bootstrap-vue@2.0.0-rc.9/dist/bootstrap-vue.cssPO)i<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/* workaround for https://github.com/bootstrap-vue/bootstrap-vue/issues/1560 */
/* source: _input-group.scss */

.input-group &gt; .input-group-prepend &gt; .b-dropdown &gt; .btn,
.input-group &gt; .input-group-append:not(:last-child) &gt; .b-dropdown &gt; .btn,
.input-group &gt; .input-group-append:last-child &gt; .b-dropdown:not(:last-child):not(.dropdown-toggle) &gt; .btn {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.input-group &gt; .input-group-append &gt; .b-dropdown &gt; .btn,
.input-group &gt; .input-group-prepend:not(:first-child) &gt; .b-dropdown &gt; .btn,
.input-group &gt; .input-group-prepend:first-child &gt; .b-dropdown:not(:first-child) &gt; .btn {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

/* Special styling for type=range and type=color input */
input.form-control[type="range"],
input.form-control[type="color"] {
    height: 2.25rem;
}
input.form-control.form-control-sm[type="range"],
input.form-control.form-control-sm[type="color"] {
    height: 1.9375rem;
}
input.form-control.form-control-lg[type="range"],
input.form-control.form-control-lg[type="color"] {
    height: 3rem;
}

/* Less padding on type=color */
input.form-control[type="color"] {
    padding: 0.25rem 0.25rem;
}
input.form-control.form-control-sm[type="color"] {
    padding: 0.125rem 0.125rem;
}

/* Add support for fixed layout table */
table.b-table.b-table-fixed {
    table-layout: fixed;
}

/* Busy table styling */
table.b-table[aria-busy='false'] {
    opacity: 1;
}
table.b-table[aria-busy='true'] {
    opacity: 0.6;
}

/* Sort styling */
table.b-table &gt; thead &gt; tr &gt; th,
table.b-table &gt; tfoot &gt; tr &gt; th {
    position: relative;
}
table.b-table &gt; thead &gt; tr &gt; th.sorting,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting {
    padding-right: 1.5em;
    cursor: pointer;
}
table.b-table &gt; thead &gt; tr &gt; th.sorting::before,
table.b-table &gt; thead &gt; tr &gt; th.sorting::after,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting::before,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting::after {
    position: absolute;
    bottom: 0;
    display: block;
    opacity: 0.4;
    padding-bottom: inherit;
    font-size: inherit;
    line-height: 180%;
}
table.b-table &gt; thead &gt; tr &gt; th.sorting::before,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting::before {
    right: 0.75em;
    content: '\2191';
}
table.b-table &gt; thead &gt; tr &gt; th.sorting::after,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting::after {
    right: 0.25em;
    content: '\2193';
}
table.b-table &gt; thead &gt; tr &gt; th.sorting_asc::after,
table.b-table &gt; thead &gt; tr &gt; th.sorting_desc::before,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting_asc::after,
table.b-table &gt; tfoot &gt; tr &gt; th.sorting_desc::before {
    opacity: 1;
}

/* Stacked table layout */
/* Derived from http://blog.adrianroselli.com/2017/11/a-responsive-accessible-table.html */
/* Always stacked */
table.b-table.b-table-stacked {
    width: 100%;
}
table.b-table.b-table-stacked,
table.b-table.b-table-stacked &gt; tbody,
table.b-table.b-table-stacked &gt; tbody &gt; tr,
table.b-table.b-table-stacked &gt; tbody &gt; tr &gt; td,
table.b-table.b-table-stacked &gt; tbody &gt; tr &gt; th,
table.b-table.b-table-stacked &gt; caption {
    display: block;
}

/* Hide stuff we can't deal with, or shouldn't show */
table.b-table.b-table-stacked &gt; thead,
table.b-table.b-table-stacked &gt; tfoot,
table.b-table.b-table-stacked &gt; tbody &gt; tr.b-table-top-row,
table.b-table.b-table-stacked &gt; tbody &gt; tr.b-table-bottom-row {
    display: none;
}

/* inter-row top border */
table.b-table.b-table-stacked &gt; tbody &gt; tr &gt; :first-child {
    border-top-width: 0.4rem;
}

/* convert TD/TH contents to "cells". Caveat: child elements become cells! */
table.b-table.b-table-stacked &gt; tbody &gt; tr &gt; [data-label] {
    display: grid;
    grid-template-columns: 40% auto;
    grid-gap: 0.25rem 1rem;
}

/* generate row cell "heading" */
table.b-table.b-table-stacked &gt; tbody &gt; tr &gt; [data-label]::before {
    content: attr(data-label);
    display: inline;
    text-align: right;
    overflow-wrap: break-word;
    font-weight: bold;
    font-style: normal;
}

@media all and (max-width: 575.99px) {
    /* Under SM */
    table.b-table.b-table-stacked-sm {
        width: 100%;
    }
    table.b-table.b-table-stacked-sm,
    table.b-table.b-table-stacked-sm &gt; tbody,
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr,
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr &gt; td,
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr &gt; th,
    table.b-table.b-table-stacked-sm &gt; caption {
        display: block;
    }
    /* hide stuff we can't deal with, or shouldn't show */
    table.b-table.b-table-stacked-sm &gt; thead,
    table.b-table.b-table-stacked-sm &gt; tfoot,
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr.b-table-top-row,
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr.b-table-bottom-row {
        display: none;
    }
    /* inter-row top border */
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr &gt; :first-child {
        border-top-width: 0.4rem;
    }
    /* convert TD/TH contents to "cells". Caveat: child elements become cells! */
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr &gt; [data-label] {
        display: grid;
        grid-template-columns: 40% auto;
        grid-gap: 0.25rem 1rem;
    }
    /* generate row cell "heading" */
    table.b-table.b-table-stacked-sm &gt; tbody &gt; tr &gt; [data-label]::before {
        content: attr(data-label);
        display: inline;
        text-align: right;
        overflow-wrap: break-word;
        font-weight: bold;
        font-style: normal;
    }
}

@media all and (max-width: 767.99px) {
    /* under MD  */
    table.b-table.b-table-stacked-md {
        width: 100%;
    }
    table.b-table.b-table-stacked-md,
    table.b-table.b-table-stacked-md &gt; tbody,
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr,
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr &gt; td,
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr &gt; th,
    table.b-table.b-table-stacked-md &gt; caption {
        display: block;
    }
    /* hide stuff we can't deal with, or shouldn't show */
    table.b-table.b-table-stacked-md &gt; thead,
    table.b-table.b-table-stacked-md &gt; tfoot,
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr.b-table-top-row,
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr.b-table-bottom-row {
        display: none;
    }
    /* inter-row top border */
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr &gt; :first-child {
        border-top-width: 0.4rem;
    }
    /* convert TD/TH contents to "cells". Caveat: child elements become cells! */
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr &gt; [data-label] {
        display: grid;
        grid-template-columns: 40% auto;
        grid-gap: 0.25rem 1rem;
    }
    /* generate row cell "heading" */
    table.b-table.b-table-stacked-md &gt; tbody &gt; tr &gt; [data-label]::before {
        content: attr(data-label);
        display: inline;
        text-align: right;
        overflow-wrap: break-word;
        font-weight: bold;
        font-style: normal;
    }
}

@media all and (max-width: 991.99px) {
    /* under LG  */
    table.b-table.b-table-stacked-lg {
        width: 100%;
    }
    table.b-table.b-table-stacked-lg,
    table.b-table.b-table-stacked-lg &gt; tbody,
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr,
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr &gt; td,
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr &gt; th,
    table.b-table.b-table-stacked-lg &gt; caption {
        display: block;
    }
    /* hide stuff we can't deal with, or shouldn't show */
    table.b-table.b-table-stacked-lg &gt; thead,
    table.b-table.b-table-stacked-lg &gt; tfoot,
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr.b-table-top-row,
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr.b-table-bottom-row {
        display: none;
    }
    /* inter-row top border */
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr &gt; :first-child {
        border-top-width: 0.4rem;
    }
    /* convert TD/TH contents to "cells". Caveat: child elements become cells! */
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr &gt; [data-label] {
        display: grid;
        grid-template-columns: 40% auto;
        grid-gap: 0.25rem 1rem;
    }
    /* generate row cell "heading" */
    table.b-table.b-table-stacked-lg &gt; tbody &gt; tr &gt; [data-label]::before {
        content: attr(data-label);
        display: inline;
        text-align: right;
        overflow-wrap: break-word;
        font-weight: bold;
        font-style: normal;
    }
}

@media all and (max-width: 1199.99px) {
    /* under XL  */
    table.b-table.b-table-stacked-xl {
        width: 100%;
    }
    table.b-table.b-table-stacked-xl,
    table.b-table.b-table-stacked-xl &gt; tbody,
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr,
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr &gt; td,
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr &gt; th,
    table.b-table.b-table-stacked-xl &gt; caption {
        display: block;
    }
    /* hide stuff we can't deal with, or shouldn't show */
    table.b-table.b-table-stacked-xl &gt; thead,
    table.b-table.b-table-stacked-xl &gt; tfoot,
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr.b-table-top-row,
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr.b-table-bottom-row {
        display: none;
    }
    /* inter-row top border */
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr &gt; :first-child {
        border-top-width: 0.4rem;
    }
    /* convert TD/TH contents to "cells". Caveat: child elements become cells! */
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr &gt; [data-label] {
        display: grid;
        grid-template-columns: 40% auto;
        grid-gap: 0.25rem 1rem;
    }
    /* generate row cell "heading" */
    table.b-table.b-table-stacked-xl &gt; tbody &gt; tr &gt; [data-label]::before {
        content: attr(data-label);
        display: inline;
        text-align: right;
        overflow-wrap: break-word;
        font-weight: bold;
        font-style: normal;
    }
}

/* Details row styling */
table.b-table &gt; tbody &gt; tr.b-table-details &gt; td {
    border-top: none;
}
</pre></body></html>Xtext/cssUUTF-8    ( 7 N ` v î ◊ ÿ*E*N                           *T